plugins {
    id 'java-library'
    id 'jacoco'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    implementation 'org.cactoos:cactoos:0.54.0'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.xerial:sqlite-jdbc:3.39.2.1'
    testImplementation 'com.h2database:h2:2.1.214'
    testImplementation 'com.mchange:c3p0:0.9.5.5'
}

jacoco {
    toolVersion = "0.8.5"
}
jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

check.dependsOn jacocoTestReport

if (project.rootProject.file('local.properties').exists()) {
    ext {
        artifact = 'jood'
        libraryName = 'jood'
        libraryDescription = 'Java object oriented database library'
        publishedGroupId = 'com.nikialeksey'

        siteUrl = 'https://github.com/nikialeksey/jood'
        gitUrl = 'https://github.com/nikialeksey/jood.git'

        libraryVersion = '3.1.2'

        developerId = 'nikialeksey'
        developerName = 'Alexey Nikitin'
        developerEmail = 'nikialeksey@gmail.com'
        licenseName = 'MIT License'
        licenseUrl = 'https://github.com/nikialeksey/jood/blob/master/LICENSE'
        allLicenses = ['MIT']
    }

    Properties properties = new Properties()
    properties.load(
            project.rootProject.file('local.properties').newDataInputStream()
    )

    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    version = libraryVersion

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    publishing {
        repositories {
            maven {
                name = 'central'
                url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                credentials {
                    username properties.getProperty("sonatype.user")
                    password properties.getProperty("sonatype.pass")
                }
            }
        }

        publications {
            jood_lib(MavenPublication) {
                artifact(javadocJar)
                artifact(sourcesJar)
                artifact("$buildDir/libs/lib-${libraryVersion}.jar")

                groupId publishedGroupId
                artifactId artifact
                version libraryVersion

                pom {
                    name = libraryName
                    description = libraryDescription

                    url = siteUrl

                    licenses {
                        license {
                            name = licenseName
                            url = licenseUrl
                        }
                    }
                    developers {
                        developer {
                            id = developerId
                            name = developerName
                            email = developerEmail
                        }
                    }
                    scm {
                        connection = gitUrl
                        developerConnection = gitUrl
                        url = siteUrl
                    }
                }

                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', 'org.cactoos')
                    dependencyNode.appendNode('artifactId', 'cactoos')
                    dependencyNode.appendNode('version', '0.54.0')
                }
            }
        }
    }

    def signingKeyId = properties.getProperty("signingKeyId")
    def signingKey = new File(properties.getProperty("signingKey")).text
    def signingPassword = properties.getProperty("signingPassword")
    signing {
        useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        sign(publishing.publications.jood_lib)
    }

    nexusStaging {
        serverUrl = "https://oss.sonatype.org/service/local/"
        username = properties.getProperty("sonatype.user")
        password = properties.getProperty("sonatype.pass")
        packageGroup = publishedGroupId
    }
}